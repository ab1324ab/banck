针对总后台不同用户角色对系统的模块操作和数据查看配置权限，分为操作权限和数据权限以及对应的二次鉴权。

1. 操作授权


用户对系统某个功能的操作权限，用来判断当前登录用户角色是否有权限执行该操作，包括二级菜单进入、二级菜单下的功能操作，如查询商家、修改商家、审核等。

1.1	数据库添加权限记录

系统库，系统菜单项目表T_SYS_MENUITEM（即二级菜单下需要配置权限的功能项目）中插入一条记录。该表字段包括：id（操作id），name（操作名），menu_id（关联二级菜单的id），show_index（显示序号），uri（操作对应的uri请求名）support_two_auth（是否需要二次授权）

插入记录后就能在总后台--角色管理--操作授权--操作权限设置页面对应的二级菜单操作中找到新添加的操作权限名。如果support_two_auth（值0或1）为1，则显示该操作的二次授权按钮。

1.2	关联用户角色

系统库，系统角色菜单项目表T_SYS_ROLE_MENUITEM中插入一条记录，表示某个角色的用户拥有此项操作的权限。该表字段包括：role_id（角色id），menuitem_id（关联的操作id，即T_SYS_MENUITEM的id），menu_id（关联的二级菜单id），need_two_auth（是否需要二次授权，真正承载二次授权判断的字段，必须和T_SYS_MENUITEM的support_two_auth字段对应）

关联用户角色也可以在总后台--角色管理--操作授权--操作权限设置页面勾选对应操作权限后后台自动插入数据库记录。

1.3 操作权限验证

当登录的用户对某个操作发出后台请求时，需要通过拦截器来验证用户在数据库中是否存在对应的权限记录，即验证用户是否拥有该项操作的权限。

用户在登录时，会在SysUserAction的用户登录login()方法中先从数据库获取登录用户所有有权限的操作项uri的集合，并存放到session.  

Clipboard Image.png

Clipboard Image.png

1.3.1 ManageFilter总拦截器

页面发送某个操作请求到后台时，先经过拦截器ManageFilter进行权限验证。ManageFilter继承AbstractInterceptor同时实现Filter。

ManageFilter首先通过ActionInvocation取到目标请求的actionName，如果目标请求uri为SysUserAction中的”login”（登录）,”userOut”（退出）,”getCheckCode”（生成验证码）,”checkNum”（检查验证码）,”getEncryptRandomRum”（获取密码控件AES随机加密因子）的情况下直接放行。

再通过ActionProxy取到目标请求的action类和action类中对应的方法名

(<action name=”” class=”” method=””></action>)

调用parseAuthentication()获取对应方法上标注的所有注解对象。

auth=parseAuthentication(action.getClass(),methodName, request);

Clipboard Image.png

迭代所有注解对象，如果是自定义的权限注解对象（AuthAnnotation）则获取对象中的方法的返回值。

AuthAnnotation包含的方法包括：

String action();  //目标请求的uri

String param[] default {};  //uri携带参数的数组，默认为空

Boolean useParam() default false;  //是否使用参数，默认false，当param不为空时应该设置为true.

Boolean noNeedAuth() default false;  //是否不需要权限验证，默认false

如果noNeedAuth为true，返回常量NO_NEED_AUTH，否则重新拼接action作为操作项uri返回。

Clipboard Image.png

得到auth后进行匹配处理，如果auth包含在HashMap集合green中，或者auth的值为常量NO_NEED_AUTH，则直接权限放行。（green集合包含的值在Green.java类中枚举） 

Clipboard Image.png

从session中取出source集合并遍历，如果集合中包含auth，则表示拥有该操作权限。（对于用户admin321是超级管理员，在代码中写死，不需要任何权限验证）

1.3.2 TwoAuthInterceptor二次授权拦截器

在经过ManangeFilter过滤之后，action请求需要经过二次授权拦截器的过滤，来确定此次操作是否需要二次授权。

同样在用户登录时，SysUserAction类的login()方法中获取到用户所有需要二次鉴权的操作uri集合，并存放到session。

Clipboard Image.png

Clipboard Image.png

在TwoAuthInterceptor首先从session中取出这些需要二次鉴权的操作uri集合“needTwoAuthMenuItems”，如果needTwoAuthMenuItems为空，表示没有需要二次鉴权的操作。

Clipboard Image.png

然后和ManageFilter一样通过调用parseAuthentication（）方法获取到请求action的@AuthAnnotation并返回auth。

如果auth为null或auth的值是常量NO_NEED_AUTH则不需要二次鉴权；迭代needTwoAuthMenuItems集合，如果集合中不包含auth则不需要二次鉴权。

1.3.3 MerchantSearchInterceptor商家管理查询拦截器

一些需要做特殊处理的操作需要用到单独的拦截器来进行处理，以商家管理的查询和操作为例。

总后台的商家管理分为商家管理、境外个人商家管理、境外企业商家管理、境内个人商家管理、境内企业商家管理和中间商管理6种查询模式，而它们的基本操作相同，所以公用的同一个jsp页面，那么查询商家信息的时候就需要用一个拦截器来对查询参数进行特殊处理。

在T_SYS_Menu表的uri字段采用带参数的方式“merchantManage?merSearchFlag=xxx”存入，在拦截器中就只需要判断参数对应哪种查询模式，然后进行特殊处理即可。

在stusts配置对应的name="merManageSearch"的action标签内添加MerchantSearchInterceptor拦截器，只拦截merManageSearch的方法。

Clipboard Image.png

获取商家查询页面的搜索表单对象merchantForm

Clipboard Image.png

如果查询模式参数是ALL（商家管理），不作处理直接通过。

如果查询模式参数是INNER_PER（境内个人）、INNER_ENTER（境内企业）、OUT_PER（境外个人）、OUT_ENTER（境外企业），则将表单对象merchantForm的“是否个人”和“是否跨境”属性设置成对应的值以后通过。

如果是MIDDLE_ENTER（中间商管理），将merchantForm的MerchantType属性设置为1（0：普通，1：中间）然后通过。

其他的查询模式参数全部返回报错。

注：6种商家管理查询模式虽然公用一个jsp页面，但是属于6个不同的操作权限。

1.3.4 MerchantCheckInterceptor商家管理操作拦截器

2. 数据授权

数据授权用于给予角色是否拥有在页面上直接查看某项数据的权限。

数据权限以操作权限为主，必须先对角色授予相应的操作权限才能进行数据授权。

2.1 数据库添加权限记录

系统库，数据权限项目表T_SYS_DATAACCESS（即二级菜单下需要配置权限的数据项）中插入一条记录，表字段包括Access_Key（数据权限key），Access_Name（数据权限名）、menu_id（关联的二级菜单id），menuItem_id（关联操作权限的uri，即T_SYS_MenuItem表的id，不需要关联操作权限时可以为空）

插入记录成功后，可以在总后台--角色管理--数据授权--数据权限设置页面对应的二级菜单项目下找到新增的数据权限。

2.2 关联用户角色

系统库，角色关联数据权限项目表T_SYS_ROLE_DATAACCESS中插入记录，表字段包括：role_id（角色id），Access_Key（数据权限key）。

对于数据权限一般指的是对数据的二次授权，所以当此表存在角色和数据权限关联记录时，则表示角色对该数据需要二次鉴权。

2.3 数据权限验证

即数据二次授权。

3. 二次授权

操作二次授权和数据二次授权在页面上的表现方式上存在较大差异，但都必须引入authMain.jsp。

Clipboard Image.png

都需要调用authMain.jsp的js方法authClick(key,encryptData,type,callback,menuId);

3.1 操作二次授权

对于需要二次鉴权的操作，在前台发送请求时需要调用authMain.jsp的menuAuthClick()方法先获取可以二次授权的授权人（部门负责人），该方法包括四个参数：

Key：操作权限key，即T_SYS_MenuItem表的id

Callback：回调函数，在获取授权人之后回调执行操作请求

relatedId：关联id，比如修改商家信息时选中某个商家的merchant_id

menuId：关联的二级菜单id

menuAuthClick()会将key,Callback,menuId传入到authClick()，然后发送ajax请求到TwoAuthAction类的getCertigier()获取授权人。

Clipboard Image.png

3.2 数据二次授权

对于需要二次鉴权的数据项，在页面上需要做特殊隐藏处理。

Clipboard Image.png

页面上隐藏处理的样式包含在authMain.jsp，只要对需要二次鉴权的数据项在jsp上加上<ca:auth>标签即可实现效果。

Clipboard Image.png

Key：数据权限key，必须和T_Sys_Dataaccess表的access_key字段对应起来。

relatesIdExpr：关联id。

当jsp上存在<ca:auth>标签，加载jsp时会请求到AuthJspTag.java类的doTag()方法（怎么实现的还没弄清楚）。

doTag()方法中会先获取当前用户所有需要二次鉴权的数据项集合。

Clipboard Image.png

然后按照“用户id_key_relatesIdExpr”的格式拼接键名，并在ICahce中查询此键名是否存在（二次鉴权通过时存放进去的）。如果allNeedTwoAuthDataAccess集合不包含key并且ICache中不存在键名，则表示用户没有权限查看此数据项（隐藏），需要二次授权。

用户点击“申请查看”时首先调用authMain.jsp的dataAuthClick()方法获取二次授权人，该方法包括四个参数：

Id：页面上承载数据权限的控件id（如input）

Key：数据权限key，即T_SYS_DataAccess表的id

encryptData：加密的数据

relatedId：关联id

然后和操作权限一样，dataAuthClick()会将key,encryptData传入到authClick()，然后发送ajax请求到TwoAuthAction类的getCertigier()获取授权人。

3.3 获取授权人（部门负责人）

在对操作和数据进行二次鉴权之前，先要获取当前操作权限或数据权限的授权人，授权人需要拥有该操作（数据）的权限才能二次授权。当用户没有权限且找不到有权限的授权人时，则无法进行二次鉴权。

前面提到过在操作二次授权和数据二次授权时，都会发送uri请求到TwoAuthAction类的getCertigier()方法。

此方法首先通过request.getParameter得到请求参数：

authType（权限类型--1：操作；2：数据）

authId（权限id，即权限key）

menuId（关联的二级菜单id，如果是请求的是操作权限，menuId参数必须传入）

*当请求的是操作二次鉴权时，先会对当前用户角色进行权限判断，验证是否已经拥有此操作权限或者是否对该操作没有任何权限。

checkDirectAuth()方法判断用户或授权人是否拥有某个操作（数据）权限。

Clipboard Image.png

如果用户已经拥有权限，则表示不需要二次授权。

checkRefuseMenuItem()方法判断用户是否对某个操作没有任何权限。

Clipboard Image.png

如果用户没有任何权限，那么二次授权就没有意义。

除了上述对操作权限的特殊处理以外，操作权限和数据权限获取授权人的逻辑基本一致

1) 用户是否存在所属部门？

StringUtils.isBlank(currentUser.getDeptCode())

否：二次鉴权失败：用户无所属部门，无法授权！

是：2)

2) 查找用户所述部门所有负责人 List<SysUser> currentDeptleaders = sysUserService.findLeaderByDeptId(currentUser.getDeptCode());

调用前面的checkDirectAuth()方法判断是否存在具有该操作（数据）权限的负责人？

否：3)

是：5)

3) 用户是否存在上级部门？

SysDept higherDept = sysDeptService.getSysDeptByCode(currentUser.getDeptCode());

否：二次鉴权失败：所属部门负责人无权限,上级部门不存在，无法授权！

是：4)

4) 查找上级部门所有负责人List<SysUser> higherDeptleaders =                    sysUserService.findLeaderByDeptId(higherDept.getHigherDeptCode());

checkDirectAuth()方法判断上级部门是否存在具有该操作（数据）权限的负责人？

否：二次鉴权失败：所属部门和上级部门负责人无权限，无法授权！

是：5)

5) 成功获取授权人，可以二次授权，将授权人存放到session

setSessionAttribute(authId + "_certigier", certigier);

获取授权人成功后，会弹出authMain.jsp的页面让用户选择短信或是密码的方式进行二次鉴权。 

Clipboard Image.png

3.4 发送短信

短信授权调用了TwoAuthAction类的sendAuthSMS()方法将随机生成的6位验证码发送到授权人绑定的手机号。

从session取出授权人对象，首先判断授权人是否绑定了手机号，如果没有手机号则无法短信授权。

Clipboard Image.png

根据关联二级菜单id和权限key（authId）校验数据库中是否存在当前权限和二级菜单的关联记录。如果不存在，则返回发送短信失败：操作（数据）权限不存在。

生成随机6位验证码

String verifyCode = StringUtil.getRandomStrNum(6);

从T_SYS_ShortMessage_Template系统短信模板表中查找到二次鉴权短信的模板（id=1200），并将用户名、权限名、验证码嵌套到模板。

Clipboard Image.png

调用短信接口发送二次鉴权短信到授权人手机号码

Clipboard Image.png

最后将验证码和此次发送短信操作标识存放到IChace，提供验证以及防止重复操作。

Clipboard Image.png

Clipboard Image.png

3.5 二次鉴权

在用户获取到授权人给予的二次授权密码或短信验证码之后，进行二次鉴权校验。TwoAuthAction类的twoAuthCkeck()方法。

获取authMain.jsp传过来的参数，并从session中取出授权人对象。

Clipboard Image.png

1) 用户输入的是授权密码，校验授权人对象（SysUser）的authPwd（授权密码）属性。如果authPwd为空，返回：二次鉴权失败：负责人未设置授权密码，请联系负责人设置授权密码，或通过短信授权！如果authPwd不为空，与用户输入的密码（inputPwd）进行比较，如果一致则表示二次鉴权通过。如果不一致，返回：二次鉴权失败：授权码错误！并记录一次错误到ICahce。

2) 用户输入的是短信验证码，取出存放在ICache的短信验证码进行比较，如果两者一致则二次鉴权通过。如果不一致，返回：二次鉴权失败：授权码错误！并记录一次错误到ICahce。

用户输入密码或短信验证码错误次数超过6次时提示错误次数超过上限，请15分钟以后重试。

Clipboard Image.png

二次鉴权通过后，将缓存ICahce中的错误次数、短信验证码、短信发送记录标识等缓存key清除。

数据权限将相关的数据按照“用户id_key_relatesIdExpr”的格式拼接一个缓存key存放到ICahce（用户在缓存时间内不需要重新数据二次授权就能查看）。对于一些加密处理的数据需要进行解密操作，如果解密失败也返回二次鉴权失败。

操作权限在二次鉴权完成后需要继续完成面前的操作权限验证。

4. 附录

一级菜单：T_SYS_MENU_CLASS

二级菜单：T_SYS_MENU

二级菜单下需要授权的操作：T_SYS_MENUITEM

操作权限关联角色：T_SYS_ROLE_MENUITEM

二级菜单下需要授权的数据：T_SYS_DATAACCESS

数据权限关联角色：T_SYS_ROLE_DATAACCESS

用户关联角色：T_SYS_USER_ROLE
